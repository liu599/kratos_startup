// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

// package 命名使用 {appid}.{version} 的方式, version 形如 v1, v2 ..

package api

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CardColor int32

const (
	CardColor_RED    CardColor = 0
	CardColor_GREEN  CardColor = 1
	CardColor_BLUE   CardColor = 2
	CardColor_YELLOW CardColor = 3
)

var CardColor_name = map[int32]string{
	0: "RED",
	1: "GREEN",
	2: "BLUE",
	3: "YELLOW",
}

var CardColor_value = map[string]int32{
	"RED":    0,
	"GREEN":  1,
	"BLUE":   2,
	"YELLOW": 3,
}

func (x CardColor) String() string {
	return proto.EnumName(CardColor_name, int32(x))
}

func (CardColor) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type HelloReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" form:"name"`
	Number               int32    `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty" form:"number" validate:"required"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HelloReq) Reset()         { *m = HelloReq{} }
func (m *HelloReq) String() string { return proto.CompactTextString(m) }
func (*HelloReq) ProtoMessage()    {}
func (*HelloReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *HelloReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloReq.Merge(m, src)
}
func (m *HelloReq) XXX_Size() int {
	return m.Size()
}
func (m *HelloReq) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloReq.DiscardUnknown(m)
}

var xxx_messageInfo_HelloReq proto.InternalMessageInfo

type HelloResp struct {
	Content              string      `protobuf:"bytes,1,opt,name=Content,proto3" json:"content"`
	CardInfo             []*CardResp `protobuf:"bytes,2,rep,name=CardInfo,proto3" json:"data"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *HelloResp) Reset()         { *m = HelloResp{} }
func (m *HelloResp) String() string { return proto.CompactTextString(m) }
func (*HelloResp) ProtoMessage()    {}
func (*HelloResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *HelloResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HelloResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HelloResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HelloResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HelloResp.Merge(m, src)
}
func (m *HelloResp) XXX_Size() int {
	return m.Size()
}
func (m *HelloResp) XXX_DiscardUnknown() {
	xxx_messageInfo_HelloResp.DiscardUnknown(m)
}

var xxx_messageInfo_HelloResp proto.InternalMessageInfo

type CardResp struct {
	Wid                  int32    `protobuf:"varint,1,opt,name=wid,proto3" json:"wid,omitempty"`
	Wsid                 string   `protobuf:"bytes,2,opt,name=wsid,proto3" json:"wsid,omitempty"`
	Cardname             string   `protobuf:"bytes,3,opt,name=cardname,proto3" json:"cardname,omitempty"`
	Cardcat              string   `protobuf:"bytes,4,opt,name=cardcat,proto3" json:"cardcat,omitempty"`
	Cardcolor            string   `protobuf:"bytes,5,opt,name=cardcolor,proto3" json:"cardcolor,omitempty"`
	Prop                 string   `protobuf:"bytes,6,opt,name=prop,proto3" json:"prop,omitempty"`
	Rare                 string   `protobuf:"bytes,7,opt,name=rare,proto3" json:"rare,omitempty"`
	Level                int32    `protobuf:"varint,8,opt,name=level,proto3" json:"level,omitempty"`
	Cost                 int32    `protobuf:"varint,9,opt,name=cost,proto3" json:"cost,omitempty"`
	Judge                int32    `protobuf:"varint,10,opt,name=judge,proto3" json:"judge,omitempty"`
	Soul                 int32    `protobuf:"varint,11,opt,name=soul,proto3" json:"soul,omitempty"`
	Attack               int32    `protobuf:"varint,12,opt,name=attack,proto3" json:"attack,omitempty"`
	Series               string   `protobuf:"bytes,13,opt,name=series,proto3" json:"series,omitempty"`
	Des1                 string   `protobuf:"bytes,14,opt,name=des1,proto3" json:"des1,omitempty"`
	Des2                 string   `protobuf:"bytes,15,opt,name=des2,proto3" json:"des2,omitempty"`
	Des3                 string   `protobuf:"bytes,16,opt,name=des3,proto3" json:"des3,omitempty"`
	Cover1               string   `protobuf:"bytes,17,opt,name=cover1,proto3" json:"cover1,omitempty"`
	Cover2               string   `protobuf:"bytes,18,opt,name=cover2,proto3" json:"cover2,omitempty"`
	Cover3               string   `protobuf:"bytes,19,opt,name=cover3,proto3" json:"cover3,omitempty"`
	Rel1                 string   `protobuf:"bytes,20,opt,name=rel1,proto3" json:"rel1,omitempty"`
	Rel2                 string   `protobuf:"bytes,21,opt,name=rel2,proto3" json:"rel2,omitempty"`
	Cat                  string   `protobuf:"bytes,22,opt,name=cat,proto3" json:"cat,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CardResp) Reset()         { *m = CardResp{} }
func (m *CardResp) String() string { return proto.CompactTextString(m) }
func (*CardResp) ProtoMessage()    {}
func (*CardResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *CardResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CardResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CardResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CardResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CardResp.Merge(m, src)
}
func (m *CardResp) XXX_Size() int {
	return m.Size()
}
func (m *CardResp) XXX_DiscardUnknown() {
	xxx_messageInfo_CardResp.DiscardUnknown(m)
}

var xxx_messageInfo_CardResp proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("demo.service.v1.CardColor", CardColor_name, CardColor_value)
	proto.RegisterType((*HelloReq)(nil), "demo.service.v1.HelloReq")
	proto.RegisterType((*HelloResp)(nil), "demo.service.v1.HelloResp")
	proto.RegisterType((*CardResp)(nil), "demo.service.v1.CardResp")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 696 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x9b, 0xdf, 0xd9, 0x89, 0xda, 0x38, 0xd6, 0x30, 0x8d, 0x25, 0x89, 0x2b, 0x85, 0x22,
	0x74, 0x43, 0x36, 0xe8, 0xa1, 0x50, 0x84, 0xb4, 0x41, 0x0b, 0x41, 0x65, 0xa5, 0x88, 0x5e, 0x64,
	0xb2, 0x3b, 0x49, 0x57, 0x77, 0x77, 0xb6, 0xb3, 0x93, 0x94, 0x5e, 0xfd, 0x17, 0xbc, 0xf8, 0x27,
	0x15, 0xbc, 0x08, 0xde, 0x83, 0x56, 0x4f, 0x3d, 0x78, 0xe8, 0x5f, 0x20, 0xf3, 0x66, 0x93, 0x96,
	0x4a, 0x3d, 0x78, 0xfb, 0xbe, 0xcf, 0xfb, 0xbe, 0xf7, 0x66, 0xdf, 0xec, 0x20, 0x83, 0xc6, 0xbe,
	0x15, 0x0b, 0x2e, 0x39, 0x5e, 0xf6, 0x58, 0xc8, 0xad, 0x84, 0x89, 0xa9, 0xef, 0x32, 0x6b, 0xda,
	0xa9, 0x6f, 0x8e, 0x7d, 0x79, 0x30, 0x19, 0x5a, 0x2e, 0x0f, 0xdb, 0x63, 0x3e, 0xe6, 0x6d, 0xf0,
	0x0d, 0x27, 0x23, 0x88, 0x20, 0x00, 0xa5, 0xeb, 0xeb, 0xf7, 0xc6, 0x9c, 0x8f, 0x03, 0x76, 0xe1,
	0x62, 0x61, 0x2c, 0x8f, 0xd3, 0xe4, 0x5a, 0x9a, 0xa4, 0xb1, 0xdf, 0xa6, 0x51, 0xc4, 0x25, 0x95,
	0x3e, 0x8f, 0x12, 0x9d, 0x35, 0x23, 0x54, 0x7e, 0xc6, 0x82, 0x80, 0x3b, 0xec, 0x10, 0x3f, 0x40,
	0xf9, 0x88, 0x86, 0x8c, 0x64, 0x5a, 0x99, 0x0d, 0xa3, 0xb7, 0x7c, 0x3e, 0x6b, 0x56, 0x46, 0x5c,
	0x84, 0x5b, 0xa6, 0xa2, 0xa6, 0x03, 0x49, 0xbc, 0x8d, 0x8a, 0xd1, 0x24, 0x1c, 0x32, 0x41, 0xb2,
	0xad, 0xcc, 0x46, 0xa1, 0xb7, 0x7e, 0x3e, 0x6b, 0xde, 0x4f, 0x6d, 0xc0, 0xcd, 0xd6, 0x94, 0x06,
	0xbe, 0x47, 0x25, 0xdb, 0x32, 0x05, 0x3b, 0x9c, 0xf8, 0x82, 0x79, 0xa6, 0x93, 0x16, 0x99, 0x09,
	0x32, 0xd2, 0x79, 0x49, 0x8c, 0xd7, 0x51, 0x69, 0x87, 0x47, 0x92, 0x45, 0x32, 0x9d, 0x59, 0x39,
	0x9b, 0x35, 0x4b, 0xae, 0x46, 0xce, 0x3c, 0x87, 0x9f, 0xa0, 0xf2, 0x0e, 0x15, 0xde, 0x5e, 0x34,
	0xe2, 0x24, 0xdb, 0xca, 0x6d, 0x54, 0xec, 0x55, 0xeb, 0xca, 0xc6, 0x2c, 0x65, 0x50, 0x3d, 0x7b,
	0xe5, 0xb3, 0x59, 0x33, 0xef, 0x51, 0x49, 0x9d, 0x45, 0x91, 0xf9, 0x3b, 0xa7, 0x3b, 0xc0, 0xd0,
	0x2a, 0xca, 0x1d, 0xf9, 0x1e, 0x0c, 0x2c, 0x38, 0x4a, 0x62, 0x8c, 0xf2, 0x47, 0x89, 0xef, 0xc1,
	0x07, 0x19, 0x0e, 0x68, 0x5c, 0x47, 0x65, 0x97, 0x0a, 0x0f, 0xf6, 0x91, 0x03, 0xbe, 0x88, 0x31,
	0x41, 0x25, 0xa5, 0x5d, 0x2a, 0x49, 0x1e, 0x52, 0xf3, 0x10, 0xaf, 0x21, 0x03, 0x24, 0x0f, 0xb8,
	0x20, 0x05, 0xc8, 0x5d, 0x00, 0x35, 0x27, 0x16, 0x3c, 0x26, 0x45, 0x3d, 0x47, 0x69, 0xc5, 0x04,
	0x15, 0x8c, 0x94, 0x34, 0x53, 0x1a, 0xaf, 0xa0, 0x42, 0xc0, 0xa6, 0x2c, 0x20, 0x65, 0x38, 0xa3,
	0x0e, 0x94, 0xd3, 0xe5, 0x89, 0x24, 0x06, 0x40, 0xd0, 0xca, 0xf9, 0x7e, 0xe2, 0x8d, 0x19, 0x41,
	0xda, 0x09, 0x81, 0x72, 0x26, 0x7c, 0x12, 0x90, 0x8a, 0x76, 0x2a, 0x8d, 0x6b, 0xa8, 0x48, 0xa5,
	0xa4, 0xee, 0x07, 0x72, 0x03, 0x68, 0x1a, 0x29, 0x9e, 0x30, 0xe1, 0xb3, 0x84, 0xdc, 0x84, 0x13,
	0xa4, 0x91, 0xea, 0xe1, 0xb1, 0xa4, 0x43, 0x6e, 0xe9, 0x73, 0x29, 0x9d, 0x32, 0x9b, 0x2c, 0x2f,
	0x98, 0x9d, 0xb2, 0x2e, 0xa9, 0x2e, 0x58, 0x57, 0xf5, 0x74, 0xf9, 0x94, 0x89, 0x0e, 0xb9, 0xad,
	0x7b, 0xea, 0x68, 0xc1, 0x6d, 0x82, 0x2f, 0x71, 0x7b, 0xc1, 0xbb, 0xe4, 0xce, 0x25, 0xde, 0x85,
	0xdd, 0xb0, 0xa0, 0x43, 0x56, 0xd2, 0xdd, 0xb0, 0xa0, 0x93, 0x32, 0x9b, 0xdc, 0x5d, 0x30, 0x5b,
	0xdd, 0xa8, 0xba, 0x8b, 0x1a, 0x20, 0x25, 0x1f, 0x3e, 0x42, 0x86, 0xba, 0xef, 0x1d, 0x58, 0x7b,
	0x09, 0xe5, 0x9c, 0xfe, 0x6e, 0x75, 0x09, 0x1b, 0xa8, 0xf0, 0xd4, 0xe9, 0xf7, 0x9f, 0x57, 0x33,
	0xb8, 0x8c, 0xf2, 0xbd, 0xc1, 0x7e, 0xbf, 0x9a, 0xc5, 0x08, 0x15, 0xdf, 0xf4, 0x07, 0x83, 0x17,
	0xaf, 0xab, 0x39, 0xfb, 0x4b, 0x16, 0xe5, 0x77, 0x59, 0xc8, 0xf1, 0x63, 0x94, 0x7f, 0xe9, 0x47,
	0x63, 0x5c, 0xb3, 0xf4, 0xe3, 0xb1, 0xe6, 0x2f, 0xcb, 0xea, 0xab, 0x97, 0x55, 0xbf, 0x86, 0xe3,
	0x6d, 0x54, 0x7e, 0x45, 0x8f, 0xe1, 0x07, 0xc7, 0x7f, 0xff, 0xa3, 0xf3, 0x87, 0x76, 0x6d, 0xf9,
	0x08, 0x55, 0xe6, 0xe5, 0xfb, 0xce, 0xe0, 0x5f, 0x1d, 0xea, 0xd7, 0xa5, 0x92, 0xd8, 0x6c, 0x7d,
	0xfc, 0xf6, 0xeb, 0x53, 0xb6, 0x8e, 0x49, 0x3b, 0x09, 0x69, 0x10, 0x6c, 0xa6, 0xa6, 0x76, 0x42,
	0x8f, 0xdf, 0x1d, 0xc0, 0xd1, 0x3c, 0x54, 0x71, 0xd8, 0xe1, 0x84, 0x25, 0x72, 0x4f, 0xb2, 0xf0,
	0x7f, 0xe7, 0x34, 0x60, 0x0e, 0xc1, 0xb5, 0x2b, 0x73, 0x84, 0x6e, 0xdd, 0x5b, 0x3d, 0xf9, 0xd1,
	0x58, 0x3a, 0x39, 0x6d, 0x64, 0xbe, 0x9e, 0x36, 0x32, 0xdf, 0x4f, 0x1b, 0x99, 0xcf, 0x3f, 0x1b,
	0x4b, 0x6f, 0x73, 0x34, 0xf6, 0x87, 0x45, 0xf8, 0xf0, 0xee, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x5a, 0x34, 0x14, 0x22, 0x04, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DemoClient interface {
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
	RequestItem(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error)
}

type demoClient struct {
	cc *grpc.ClientConn
}

func NewDemoClient(cc *grpc.ClientConn) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) SayHello(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) SayHelloURL(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/SayHelloURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) RequestItem(ctx context.Context, in *HelloReq, opts ...grpc.CallOption) (*HelloResp, error) {
	out := new(HelloResp)
	err := c.cc.Invoke(ctx, "/demo.service.v1.Demo/RequestItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoServer is the server API for Demo service.
type DemoServer interface {
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SayHello(context.Context, *HelloReq) (*emptypb.Empty, error)
	SayHelloURL(context.Context, *HelloReq) (*HelloResp, error)
	RequestItem(context.Context, *HelloReq) (*HelloResp, error)
}

// UnimplementedDemoServer can be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (*UnimplementedDemoServer) Ping(ctx context.Context, req *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDemoServer) SayHello(ctx context.Context, req *HelloReq) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedDemoServer) SayHelloURL(ctx context.Context, req *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHelloURL not implemented")
}
func (*UnimplementedDemoServer) RequestItem(ctx context.Context, req *HelloReq) (*HelloResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestItem not implemented")
}

func RegisterDemoServer(s *grpc.Server, srv DemoServer) {
	s.RegisterService(&_Demo_serviceDesc, srv)
}

func _Demo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).SayHello(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_SayHelloURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).SayHelloURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/SayHelloURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).SayHelloURL(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_RequestItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).RequestItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/demo.service.v1.Demo/RequestItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).RequestItem(ctx, req.(*HelloReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Demo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "demo.service.v1.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Demo_Ping_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _Demo_SayHello_Handler,
		},
		{
			MethodName: "SayHelloURL",
			Handler:    _Demo_SayHelloURL_Handler,
		},
		{
			MethodName: "RequestItem",
			Handler:    _Demo_RequestItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *HelloReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Number != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HelloResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HelloResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HelloResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CardInfo) > 0 {
		for iNdEx := len(m.CardInfo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CardInfo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CardResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CardResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CardResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Cat) > 0 {
		i -= len(m.Cat)
		copy(dAtA[i:], m.Cat)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cat)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.Rel2) > 0 {
		i -= len(m.Rel2)
		copy(dAtA[i:], m.Rel2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rel2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if len(m.Rel1) > 0 {
		i -= len(m.Rel1)
		copy(dAtA[i:], m.Rel1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rel1)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Cover3) > 0 {
		i -= len(m.Cover3)
		copy(dAtA[i:], m.Cover3)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover3)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if len(m.Cover2) > 0 {
		i -= len(m.Cover2)
		copy(dAtA[i:], m.Cover2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover2)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Cover1) > 0 {
		i -= len(m.Cover1)
		copy(dAtA[i:], m.Cover1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cover1)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.Des3) > 0 {
		i -= len(m.Des3)
		copy(dAtA[i:], m.Des3)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Des3)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.Des2) > 0 {
		i -= len(m.Des2)
		copy(dAtA[i:], m.Des2)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Des2)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.Des1) > 0 {
		i -= len(m.Des1)
		copy(dAtA[i:], m.Des1)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Des1)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Series) > 0 {
		i -= len(m.Series)
		copy(dAtA[i:], m.Series)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Series)))
		i--
		dAtA[i] = 0x6a
	}
	if m.Attack != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Attack))
		i--
		dAtA[i] = 0x60
	}
	if m.Soul != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Soul))
		i--
		dAtA[i] = 0x58
	}
	if m.Judge != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Judge))
		i--
		dAtA[i] = 0x50
	}
	if m.Cost != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Cost))
		i--
		dAtA[i] = 0x48
	}
	if m.Level != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Rare) > 0 {
		i -= len(m.Rare)
		copy(dAtA[i:], m.Rare)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Rare)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Prop) > 0 {
		i -= len(m.Prop)
		copy(dAtA[i:], m.Prop)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Prop)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Cardcolor) > 0 {
		i -= len(m.Cardcolor)
		copy(dAtA[i:], m.Cardcolor)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cardcolor)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Cardcat) > 0 {
		i -= len(m.Cardcat)
		copy(dAtA[i:], m.Cardcat)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cardcat)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Cardname) > 0 {
		i -= len(m.Cardname)
		copy(dAtA[i:], m.Cardname)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Cardname)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Wsid) > 0 {
		i -= len(m.Wsid)
		copy(dAtA[i:], m.Wsid)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Wsid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Wid != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.Wid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HelloReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovApi(uint64(m.Number))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *HelloResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.CardInfo) > 0 {
		for _, e := range m.CardInfo {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CardResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Wid != 0 {
		n += 1 + sovApi(uint64(m.Wid))
	}
	l = len(m.Wsid)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cardname)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cardcat)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Cardcolor)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Prop)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Rare)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovApi(uint64(m.Level))
	}
	if m.Cost != 0 {
		n += 1 + sovApi(uint64(m.Cost))
	}
	if m.Judge != 0 {
		n += 1 + sovApi(uint64(m.Judge))
	}
	if m.Soul != 0 {
		n += 1 + sovApi(uint64(m.Soul))
	}
	if m.Attack != 0 {
		n += 1 + sovApi(uint64(m.Attack))
	}
	l = len(m.Series)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Des1)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Des2)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Des3)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Cover1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Cover2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Cover3)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Rel1)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Rel2)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	l = len(m.Cat)
	if l > 0 {
		n += 2 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HelloReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HelloResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HelloResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HelloResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CardInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CardInfo = append(m.CardInfo, &CardResp{})
			if err := m.CardInfo[len(m.CardInfo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CardResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CardResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CardResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wid", wireType)
			}
			m.Wid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wsid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Wsid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cardname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardcat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cardcat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cardcolor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cardcolor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prop", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prop = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rare", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rare = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Judge", wireType)
			}
			m.Judge = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Judge |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Soul", wireType)
			}
			m.Soul = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Soul |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attack", wireType)
			}
			m.Attack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Attack |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Series", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Series = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Des1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Des1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Des2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Des2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Des3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Des3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rel1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rel1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rel2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rel2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cat = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
